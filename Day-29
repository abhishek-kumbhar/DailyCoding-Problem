/*
This problem was asked by Google.
Given two singly linked lists that intersect at some point, find the intersecting node.
The lists are non-cyclical.
For example, given A = 3 -> 7 -> 8 -> 10 and B = 99 -> 1 -> 8 -> 10, return the node
with value 8.
In this example, assume nodes with the same value are the exact same node
objects.
*/

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node * next;
};

struct node * createNode (int data) {
    struct node * newnd = (struct node *)malloc(sizeof(struct node));
    newnd->data = data;
    newnd->next = NULL;
    printf("\nnode add = %p at val = %d ", newnd, data);
    return newnd;
}

struct node * addNode (struct node * headnd, int data) {
    struct node * newnd = createNode(data);
    struct node * tempnd;
    if (headnd == NULL) {
        tempnd = headnd = newnd;
    } else {
        tempnd->next = newnd;
        tempnd = newnd;
    }
    return headnd;
}

void print(struct node *headnd) {
    for (int i = 0; i < 6; i++) {
        printf("%d ", headnd->data);
        headnd = headnd->next;
    }
}

int isIntersecting(struct node *headnd1, struct node *headnd2) {
    struct node *temp1 = headnd1, *temp2 = headnd2;
    while (temp1->data != temp2->data) {
        temp1 = temp1->next;
        temp2 = temp2->next;
    }
    struct node * temp3 = temp1;
    int flag = 0, cnt = 0, arr[20], i = 0;

    while (temp1 != NULL) {
        if (temp1->data == temp2->data) {
            arr[i++] = 1;
            cnt++;
        } else {
            arr[i++] = 0;
        }
        temp1 = temp1->next;
        temp2 = temp2->next;
    }

    for (int i = 0; i < cnt; i++) {
        if (arr[i] == 1) {
            flag = 1;
        } else {
            flag = 2;
            break;
        }
    }
        
    if (flag == 2) {
        printf("\nNot intersected properly...");
    } else if (flag == 1) {
        printf("\nIntersected at %d ", temp3->data);
    }


   // printf("\ntemp1 = %p ", temp1);
   // printf("\ntemp2 = %p ", temp2);

}   


void main (void) {
    struct node *headnd1 = NULL, *headnd2 = NULL;
    headnd1 = addNode(headnd1, 3);
    headnd1 = addNode(headnd1, 7);
    headnd1 = addNode(headnd1, 8);
    headnd1 = addNode(headnd1, 10);
    headnd1 = addNode(headnd1, 11);
    headnd1 = addNode(headnd1, 12);
    

    printf("\n-------------------------------------------------------------\n");

    headnd2 = addNode(headnd2, 99);
    headnd2 = addNode(headnd2, 1);
    headnd2 = addNode(headnd2, 8);
    headnd2 = addNode(headnd2, 10);
    headnd2 = addNode(headnd1, 11);
    headnd2 = addNode(headnd1, 12);

    printf("\n-------------------------------------------------------------\n");
    
    print(headnd1);
    print(headnd2);
    
    printf("\n-------------------------------------------------------------\n");
    
    isIntersecting(headnd1, headnd2);
}
